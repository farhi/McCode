/*******************************************************************************
*
* Mcstas, neutron ray-tracing package
*         Copyright (C) 1997-2020, All rights reserved
*         DTU Physics, Kongens Lyngby, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: Source_pulsed_multi
*
* %I
* Written by: Pablo Gila-Herranz, based on component 'Source_pulsed' by Klaus Lieutenant, 'Moderator' by K. Nielsen, M. Hagen and 'ESS_moderator_long_2001' by K. Lefmann
* Date  : March 31, 2025
* Version: 1.1
* Origin: Materials Physics Center (CFM-MPC), CSIC-UPV/EHU
*
* A pulsed source for variable proton pulse lengths. Multiple pulses can be simulated over time.
*
* %D
* Custom pulse spectrum with a wavelength distribution as a sum of up to 3 Maxwellian distributions and one of undermoderated neutrons.
*
* By default, all Maxwellian distributions are assumed to come from anywhere in the moderator.
* However, a radious r_i can be defined such that the central circle of radius r_i is at temperature T1,
* and the surrounding ring is at temperature T2.
* The third Maxwellian distribution at temperature T3 always comes from anywhere in the moderator.
*
* Multiple pulses can be simulated over time with the n_pulses parameter,
* in contrast to the Source_pulsed component, which only simulates a single pulse.
* Note that the intensity spreads over n_pulses, so that the units of neutrons per second are preserved.
*
* Parameters xwidth and yheight must be provided for rectangular moderators, otherwise a circular shape is assumed.
*
* Usage example: 
*   Source_pulsed_multi(xwidth=0.04, yheight=0.04, Lmin=1.0, Lmax=3.0, n_pulses=2,
*                       dist=0.700, focus_xw=0.020, focus_yh=0.020, freq=96.0, t_pulse=0.000208,
*                       T1=325.0, I1=7.6e9, tau1=0.000170, I_um=2.7e8, chi_um=2.5)
*
* Parameters for some sources:
*
*   HBS thermal source:
*     xwidth=0.04, yheight=0.04, T1=325.0, I1=0.68e+12/freq, tau1=0.000125,
*     n_mod=10, I_um=2.47e+10/freq, chi_um=2.5, t_pulse=0.016/freq, freq=96.0 or 24.0
*
*   HBS cold source:
*     radius=0.010,              T1= 60.0, I1=1.75e+12/freq, tau2=0.000170,
*     n_mod= 5, I_um=3.82e+10/freq, chi_um=0.9, t_pulse=0.016/freq, freq=24.0 or 96.0
*
*   HBS bi-spectral:
*     radius=0.022, r_i=0.010,   T1= 60.0, I1=1.75e+12/freq, tau2=0.000170,                                 
*     T2=305.0, I2=0.56e+12/freq, tau1=0.000130,
*     n_mod= 5, I_um=3.82e+10/freq, chi_um=2.5, t_pulse=0.016/freq, freq=24.0 or 96.0
*
* %P
* Input parameters:
*
* xwidth:         [m]        Width of the source
* yheight:        [m]        Height of the source
* radius:         [m]        Outer radius of the source
* r_i:            [m]        Radius of a central circle at temperature T1, sorrounded by a ring at temperature T2; ignored by default
* Lmin:           [Ang]      Lower edge of the wavelength distribution
* Lmax:           [Ang]      Upper edge of the wavelength distribution
* freq:           [Hz]       Frequency of pulses
* t_pulse:        [s]        Proton pulse length
* tmax_multiplier [1]        Defined maximum emission time at moderator, tmax = tmax_multiplier * t_pulse
* n_pulses        [1]        Number of pulses to be simulated (minimum 1)
* target_index:   [1]        relative index of component to focus at, e.g. next is +1; this is used to compute 'dist' automatically
* dist:           [m]        Distance from the source to the target
* focus_xw:       [m]        Width  of the target (= focusing rectangle)
* focus_yh:       [m]        Height of the target (= focusing rectangle)
* T1:             [K]        Temperature of the 1st Maxwellian distribution; for r_i > 0 it is only used for the central radii r < r_i
* I1:       [1/(cm**2*sr)]   Flux per solid angle of the 1st Maxwellian distribution (integrated over the whole wavelength range)
* tau1:           [s]        Pulse decay constant of the 1st Maxwellian distribution
* T2:             [K]        Temperature of the 2nd Maxwellian distribution, 0=none; for r_i > 0 it is only used for the external ring r > r_i
* I2:       [1/(cm**2*sr)]   Flux per solid angle of the 2nd Maxwellian distribution
* tau2:           [s]        Pulse decay constant of the 2nd Maxwellian distribution
* T3:             [K]        Temperature of the 3rd Maxwellian distribution, 0=none
* I3:       [1/(cm**2*sr)]   Flux per solid angle of the 3rd Maxwellian distribution
* tau3:           [s]        Pulse decay constant of the 3rd Maxwellian distribution
* n_mod:          [1]        Ratio of pulse decay constant to pulse ascend constant of moderated neutrons
* I_um:     [1/(cm**2*sr)]   Flux per solid angle for the under-moderated neutrons
* tau_um:         [s]        Pulse decay constant of under-moderated neutrons
* n_um:           [1]        Ratio of pulse decay constant to pulse ascend constant of under-moderated neutrons
* chi_um:       [1/Ang]      Factor for the wavelength dependence of under-moderated neutrons
* kap_um:         [1]        Scaling factor for the flux of under-moderated neutrons
*
* %E
*******************************************************************************/

DEFINE COMPONENT Source_pulsed_multi
DEFINITION PARAMETERS ()
SETTING PARAMETERS (xwidth=0.0, yheight=0.0, radius=0.010, r_i=0.0,  
    Lmin, Lmax, freq, t_pulse, tmax_multiplier=3.0, int n_pulses=1, 
    int target_index=1, dist=0.0, focus_xw=0.02, focus_yh=0.02,
    T1=0.0, I1=0.0, tau1=0.000125,  T2=0.0, I2=0.0, tau2=0.0,  T3=0.0, I3=0.0, tau3=0.0,  n_mod=10,
    I_um=0.0, tau_um=0.000012, n_um=5, chi_um=2.5, kap_um=2.2)
OUTPUT PARAMETERS ()
/* Neutron parameters: (x,y,z, vx,vy,vz, t, sx,sy,sz, p) */


SHARE
%{
  /* Normalized Maxwellian distribution:
  $M(\lambda)=\frac{2k_{T h}^{2}}{T^2\lambda^{5}}e^{-\frac{k_{T h}}{T\lambda^{2}}}$
  */
  #pragma acc routine
  double Maxwell(double lmbd, double temp)
  {
    double a, M=0.0;

    if (temp > 0.0 && lmbd > 0.0)
    { a = 949.29/temp;
      M = 2.0*a*a*exp(-a/(lmbd*lmbd))/pow(lmbd,5);
    }
    return M;
  }

  /* Distribution of under-moderated neutrons */
  #pragma acc routine
  double Mezei_N_fct(double lmbd, double chi, double kappa)
  {
    if (lmbd > 0.0)
      return 1.0 / (1.0 + exp(chi*lmbd-kappa)) / lmbd;
    else 
      return 0.0;
  }

  /* Integral of the pulse shape over time
  $\frac{e^{-\frac{t}{\tau/n}}-ne^{-\frac{t}{\tau}}}{n-1}$
  */
  #pragma acc routine
  double Mezei_i_fct(double time, double tau, double n)
  {
    if (n > 1.0 && tau > 0.0)
      return (exp(-time/(tau/n)) - n*exp(-time/tau)) / (n-1);
    else
      return 0.0;
  }

  /* Normalized long pulse function.
  Models the normalized time-dependent flux of a long pulse,
  ensuring the total flux integrates to 1 over the pulse duration.*/
  #pragma acc routine
  double Mezei_I_fct(double time, double tau, double n, double length)
  {
    if (time <= 0.0  || tau <= 0.0 || n <= 1.0 || length <= 0.0)
      return 0.0;
    else if (time <= length)
      return (Mezei_i_fct(time, tau, n)+1.0) / length;
    else  /* time is greater than the proton pulse */
      return (  Mezei_i_fct(time,        tau, n)
              - Mezei_i_fct(time-length, tau, n)) / length;
  }
%}


DECLARE
%{
  double area;      /*   [cm^2]   Moderator surface area    */
  double t_period;  /*    [s]     Period of the pulse cycle */
  double alpha;     /*    [1]     Duty cycle                */
  double p_in;      /* [1/Ang/s]  Flux normalisation factor */
%}


INITIALIZE
%{
  /* Initial check of the input parameters */
  if (   xwidth < 0.0 ||  yheight  < 0.0 ||   radius < 0.0 ||    r_i < 0.0 ||   Lmin < 0.0  ||  Lmax < 0.0
      ||  dist  < 0.0 || focus_xw  < 0.0 || focus_yh < 0.0 ||   freq < 0.0 || t_pulse < 0.0 ||  tmax_multiplier < 0.0
      ||     T1 < 0.0 ||        I1 < 0.0 ||     tau1 < 0.0 ||     T2 < 0.0 ||      I2 < 0.0
      ||   tau2 < 0.0 ||        T3 < 0.0 ||       I3 < 0.0 ||   tau3 < 0.0 ||   n_mod < 0.0
      ||   I_um < 0.0 ||    tau_um < 0.0 ||     n_um < 0.0 || chi_um < 0.0 ||  kap_um < 0.0)
  {
      printf("Source_pulsed_multi: %s: Error: negative input parameter!\n"
             "ERROR          Exiting\n", NAME_CURRENT_COMP);
      exit(-1);
  }
  if (Lmax <= Lmin)
  {
      printf("Source_pulsed_multi: %s: Error: wavelengths should be Lmin < Lmax!\n"
             "ERROR          Exiting\n", NAME_CURRENT_COMP);
      exit(-1);
  }
  if (T1 == 0.0 && T2 == 0.0 && T3 == 0.0)
  {
      printf("Source_pulsed_multi: %s: Error: No temperature T1, T2 nor T3 defined!\n"
             "ERROR          Exiting\n", NAME_CURRENT_COMP);
      exit(-1);
  }
  if (I1 == 0.0 && I2 == 0.0 && I3 == 0.0)
  {
      printf("Source_pulsed_multi: %s: Error: No flux I1, I2 nor I3 defined!\n"
             "ERROR          Exiting\n", NAME_CURRENT_COMP);
      exit(-1);
  }

  /* Automatic distance */
  if (target_index > 0 && dist==0.0)
  {
    Coords ToTarget;
    double tx,ty,tz;
    ToTarget = coords_sub(POS_A_COMP_INDEX(INDEX_CURRENT_COMP+target_index),POS_A_CURRENT_COMP);
    ToTarget = rot_apply(ROT_A_CURRENT_COMP, ToTarget);
    coords_get(ToTarget, &tx, &ty, &tz);
    dist=sqrt(tx*tx+ty*ty+tz*tz);
  }

  /* Pulse parameters */
  t_period = 1.0/freq;
  alpha    = t_pulse / t_period;

  /* Area for different moderator shapes */
  if (xwidth > 0.0 && yheight > 0.0)
  { 
    area  = 10000.0 * xwidth * yheight;
  }
  else if (radius > 0.0)
  {
    area  = 10000.0 * PI*radius*radius;
  }
  else
  {
    printf("Source_pulsed_multi: %s: Error: The shape of the source is not set! Use xwidth/yheight or radius. \n"
           "ERROR          Exiting\n", NAME_CURRENT_COMP);
    exit(-1);
  }
  p_in = (Lmax - Lmin) * (t_pulse * tmax_multiplier) / mcget_ncount();

  /* Set the number of pulses to an integer */
  n_pulses=(double)floor(n_pulses);
  if (n_pulses < 1) n_pulses=1;
%}


TRACE
%{
  double phi,    /* [rad]  Orientation of the starting point for a spherical moderator */
         r,      /*  [m]   Distance of the starting point from moderator center        */
         v,      /* [m/s]  Speed of the neutron                                        */
         time,   /*  [s]   Time                                                        */
         lambda, /* [Ang]  Wavelength of the neutron                                   */
         xf,     /*  [m]   Horizontal position on the target                           */
         yf,     /*  [m]   Vertical position on the target                             */
         rf,     /*  [m]   Distance between point on moderator and point on target     */
         dx,     /*  [m]   Horizontal shift from moderator to target                   */
         dy,     /*  [m]   Vertical shift from moderator to target                     */
         Omega,  /* [sr]   Solid angle of the target                                   */
         flux;   /* [1/(cm^2 s Ang sr]  Flux(lambda,time)                              */

  /* Choose the starting point on the moderator surface with uniform distribution for different moderator shapes */
  if (xwidth > 0.0 && yheight > 0.0)
  { 
    x = xwidth* (rand01() - 0.5);
    y = yheight*(rand01() - 0.5);
  }
  else
  { phi = 2*PI*rand01();          
    r = sqrt(rand01())*radius; 
    x = r*cos(phi);
    y = r*sin(phi);
  }
  z = 0.0;

  /* Set zero polarization, choose wavelength and starting time */
  sx = 0.0;
  sy = 0.0;
  sz = 0.0;

  lambda = Lmin  + (Lmax  - Lmin)  * rand01();     
  t      = t_pulse * tmax_multiplier * rand01(); 
  
  /* Propagate to target */
  randvec_target_rect_real(&xf, &yf, &rf, &Omega,
                           0, 0, dist, focus_xw, focus_yh, ROT_A_CURRENT_COMP, x, y, z, 2);

  /* Length of the flight path */
  dx = xf - x;
  dy = yf - y;
  rf = sqrt(dx*dx + dy*dy + dist*dist);

  /* Speed of the neutron */
  v  = 3956.0346 / lambda;
  vx = v*dx/rf;
  vy = v*dy/rf;
  vz = v*dist/rf;

  /* Weight: flux in [1/(cm^2 s Ang sr] */
  flux = I_um * Mezei_N_fct(lambda, chi_um, kap_um) * Mezei_I_fct(t, tau_um, n_um,  t_pulse);
  if (r_i==0.0 || r <= r_i)
    flux += I1 * Maxwell(lambda, T1) * Mezei_I_fct(t, tau1,   n_mod, t_pulse); 
  if (r_i==0.0 || r > r_i)
    flux += I2 * Maxwell(lambda, T2) * Mezei_I_fct(t, tau2,   n_mod, t_pulse); 
  flux  +=  I3 * Maxwell(lambda, T3) * Mezei_I_fct(t, tau3,   n_mod, t_pulse);

  /* Assign this neutron to a random pulse */
  t += (double)floor((n_pulses)*rand01())/freq;
  /* The value of p remains consistent since the intensity spreads over n_pulses */
  p  = flux * area* Omega * p_in;  /*  [1]   neutrons per pulse       */
  p *= freq;                       /* [1/s]  time averaged intensity  */

  SCATTER;
%}


MCDISPLAY
%{
  double edge;  /* [m]  x and y position on the circle */

  if (dist > 0.0) 
  {
    if (xwidth > 0.0 && yheight > 0.0) 
    {
      rectangle("xy", 0,0,0, xwidth,yheight);
      dashed_line(-xwidth/2, -yheight/2, 0, -focus_xw/2,-focus_yh/2, dist, 4);
      dashed_line( xwidth/2, -yheight/2, 0,  focus_xw/2,-focus_yh/2, dist, 4);
      dashed_line( xwidth/2,  yheight/2, 0,  focus_xw/2, focus_yh/2, dist, 4);
      dashed_line(-xwidth/2,  yheight/2, 0, -focus_xw/2, focus_yh/2, dist, 4);
    }
    else
    {
      circle("xy", 0,0,0, radius);
      if (r_i > 0.0)
        circle("xy", 0,0,0, r_i);
      edge = radius/sqrt(2.0);
      dashed_line(-edge, -edge, 0, -focus_xw/2,-focus_yh/2, dist, 4);
      dashed_line( edge, -edge, 0,  focus_xw/2,-focus_yh/2, dist, 4);
      dashed_line( edge,  edge, 0,  focus_xw/2, focus_yh/2, dist, 4);
      dashed_line(-edge,  edge, 0, -focus_xw/2, focus_yh/2, dist, 4);
    }
  }
%}

END
