/*******************************************************************************
*
* McXtrace, x-ray tracing package
*         Copyright, All rights reserved
*         DTU Physics, Kgs. Lyngby, Denmark
*         Synchrotron SOLEIL, Saint-Aubin, France
*
* Component: Fluo_detector
*
* %Identification
* Written by: E. Farhi
* Date:       May 2025
* Origin:     Synchrotron SOLEIL
*
* Detector for fluorescence, e.g. Silicon Drift Detector (SDD) or High Purity Germanium (HPGe).
*
* %Description
* A detector that records energy spectrum from e.g. fluorescence.
* This component handles:
* - fluorescence detector escape  (energy shift from detector K-alpha)
* - fluorescence detector pile-up (sum aka time-coincidence aka pile-up within detector dead-time)
* - energy resolution (above Fano level)
*
* The detector geometry can be a rectangle xwidth*yheight, or a disk of given 'radius'.
* When the radius is given negative, a 4PI detector sphere of given radius is assumed.
*
* The detector escape corresponds with a fluorescence excitation within the detector itself
* that subtracts the K-alpha detector level from the sample scattered energy.
* The level of escape peaks in set as 'escape_ratio', e.g. 1-2 %.
*
* The detector pile-up is related to the detector dead-time, within which time coincidence
* between two fluorescence photons are summed-up.
* The level of pile-up is set as 'pileup_ratio', e.g. 1-2 % which can increase for high
* count rates that saturate the detector.
*
* Last, the fluorescence peak shape is broadened using an electronic noise (at E=0) and
* a nominal resolution at E=resolution_energy (in keV). You may set the electronic_noise
* to zero for a perfect detector (Fano limit). To use a constant resolution, set the
* resolution_energy=0.
*
* Example: Fluo_detector(xwidth=0.1, yheight=0.1,
*                 Emin=1, Emax=50, nE=20, filename="Output.nrj")
*
* %Parameters
* INPUT PARAMETERS:
* radius:             [m] Radius of disk detector (in XY plane). When given as negative, a 4PI sphere is assumed.
* xwidth:             [m] Width  of rectangle detector.
* yheight:            [m] Height of rectangle detector.
* Emin:             [keV] Minimum energy to detect.
* Emax:             [keV] Maximum energy to detect.
* nE:                 [m] Number of energy channels.
* filename:         [str] Name of file in which to store the detector image.
* restore_xray:     [0/1] If set, the monitor does not influence the x-ray state.
* escape_ratio:       [1] Detector escape peak ratio,  e.g. 0.01-0.02. Zero inactivates.
* escape_energy:    [keV] Detector escape peak energy, e.g. 1.739 for Si, 9.886 for Ge.
* pileup_ratio:       [1] Sum aka time coincidence aka pile-up detector peak ratio, e.g. 0.01-0.02. This is e.g. the dead-time ratio. Zero inactivates.
* electronic_noise: [keV] Electronic noise at E=0, in keV. Use electronic_noise=0 for Fano limit.
* resolution_energy:[keV] Energy at which resolution is given, e.g. 5.9 keV Mn K-alpha.
* resolution:       [keV] Resolution FWHM in keV at resolution_energy.
* flag_lorentzian:    [1] When 1, the line shapes are assumed to be Lorentzian, else Gaussian.
*
* %Link
* Fluorescence https://en.wikipedia.org/wiki/Fluorescence
*
* %End
*******************************************************************************/

DEFINE COMPONENT Fluo_detector
SETTING PARAMETERS(
  radius=0, xwidth=0, yheight=0,
  Emin=1, Emax=39, nE=2000, string filename=0,
  restore_xray=0,
  escape_ratio=0.01, escape_energy    = 1.739,
  pileup_ratio=0.01, electronic_noise = 0.1,
  resolution_energy= 6, resolution = 0.2,
  flag_lorentzian=0)

/* X-ray parameters: (x,y,z,kx,ky,kz,phi,t,Ex,Ey,Ez,p) */

SHARE %{
#ifndef FLUO_DETECTOR
#define FLUO_DETECTOR

#define SDD_ESCAPE 5 // Detector escape      peak fluorescence
#define SDD_PILEUP 6 // Detector pile-up/sum peak fluorescence
  /* SDD_SelectFromDistribution: select a random element from a distribution
   *   index = SDD_SelectFromDistribution(cum_sum[N], N);
   * index is returned within 0 and N-1
   * The x_arr must be a continuously increasing cumulated sum, which last element is the max
   */
  int SDD_SelectFromDistribution(double x_arr[], int N)
  {
    if (x_arr == NULL || N <=0) return (0);
    double x=rand01()*x_arr[N-1];
    if (x<x_arr[0]) {    // x is smaller than lower limit
      return 0;
    }
    if (x>=x_arr[N-1]) { // x is greater or equal to upper limit
      return N-1;
    }
    int id=0, iu=N-1; // lower and upper index of the subarray to search
    while (iu-id>1) { // search until the size of the subarray to search is >1
      int im = (id + iu)/2; // use the midpoint for equal partition
      // decide which subarray to search
      if (x>=x_arr[im]) id=im; // change min index to search upper subarray
      else iu=im; // change max index to search lower subarray
    }

    return id;
  } // SDD_SelectFromDistribution

  /* XRMC_SelectInteraction: select interaction type Fluo/Compton/Rayleigh
   * Return the interaction type from a random choice within cross sections 'xs'
   *   type = XRMC_SelectInteraction(xs[3], 3);
   * 'xs' is computed with XRMC_CrossSections.
   * type is one of FLUORESCENCE | RAYLEIGH | COMPTON
   */
  int SDD_SelectInteraction(double *xs, int nb_processes)
  {
    double sum_xs, *cum_xs;
    int    i;

    if (xs == NULL || nb_processes < 1) return 0;
    cum_xs = malloc((nb_processes+1)*sizeof(double));
    if (!cum_xs)          return 0;
    cum_xs[0]=sum_xs=0;
    for (i=0; i< nb_processes; i++) {
      sum_xs += xs[i];
      cum_xs[i+1]= sum_xs;
    }
    i = SDD_SelectFromDistribution(cum_xs, nb_processes+1);
    free(cum_xs);
    return i;
  } // SDD_SelectInteraction
#endif
%}

DECLARE %{
  DArray1d E_N;
  DArray1d E_p;
  DArray1d E_p2;
  DArray1d E_N_pileup;
  DArray1d E_p_pileup;
  DArray1d E_p2_pileup;
  DArray1d E_N_escape;
  DArray1d E_p_escape;
  DArray1d E_p2_escape;
  int      shape;
  double   K;
  double   p_sum;
  double   N_sum;
%}


INITIALIZE %{

  shape=-1; /* 0:cyl, 1:box, 2:sphere  */

  if (xwidth && yheight)            shape=1; /* rectangle */
  else if (radius > 0)              shape=0; /* disk      */
  else if (radius < 0)              shape=2; /* sphere    */
  else
    exit(fprintf(stderr,"Fluo_detector: %s: detector has invalid dimensions.\n"
                        "ERROR          Please check parameter values (xwidth, yheight, zdepth, radius).\n", NAME_CURRENT_COMP));

  // Use instance name for monitor output if no input was given
  if (!strcmp(filename,"\0")) sprintf(filename,"%s",NAME_CURRENT_COMP);

  // storage
  E_N        = create_darr1d(nE);
  E_p        = create_darr1d(nE);
  E_p2       = create_darr1d(nE);
  E_N_pileup = create_darr1d(nE);
  E_p_pileup = create_darr1d(nE);
  E_p2_pileup= create_darr1d(nE);
  E_N_escape = create_darr1d(nE);
  E_p_escape = create_darr1d(nE);
  E_p2_escape= create_darr1d(nE);
  p_sum=N_sum=0;

  // constant for resolution calculation
  if (resolution > electronic_noise && resolution_energy > 0)
    K = (resolution*resolution-electronic_noise*electronic_noise)/resolution_energy;
  else K=0;

%}

TRACE %{
  int    intersect=0;       /* flag to continue/stop */
  double l0,  l1;           /* times for intersections */
  int    type=-1;

  if (shape==0)       // disk
    intersect=(x*x + y*y < radius*radius);
  else if (shape==1)  // rectangle
    intersect=(-xwidth/2  < x && x < xwidth/2
            && -yheight/2 < y && y < yheight/2);
  else if (shape==2)  // sphere
    intersect=sphere_intersect  (&l0,&l1, x,y,z,kx,ky,kz, radius);

  if (intersect) {  /* we propagate to the detector surface */
    int i;
    double k, E, dE;

    if (shape==2) {
      if (l0 > 0 && (l0 < l1 || l1 < 0))
        PROP_DL(l0);
      else
        PROP_DL(l1);
    }
    else
      PROP_Z0;

    k     = sqrt(kx*kx + ky*ky + kz*kz);
    E     = k*K2E;
    type  = 0;

    // handle detector escape peak: just shift energy down by detector K-alpha
    if (escape_ratio > 0 && escape_energy > 0 && E > escape_energy && rand01() < escape_ratio) {
        E   -= escape_energy; // escape
        type = SDD_ESCAPE;

    } else if (pileup_ratio > 0 && rand01() < pileup_ratio) {
        // handle detector pile-up peak: get an other fluo line and sum it
        int i_E = SDD_SelectInteraction(E_p, nE);
        E  += Emin+i_E*(Emax-Emin)/nE;             // pile-up
        type= SDD_PILEUP;
    }

    // we add the detector resolution (broadening)
    if (K)
      dE = sqrt(K*E+electronic_noise*electronic_noise);
    else if (resolution > 0)
      dE = resolution;
    else if (electronic_noise > 0)
      dE = electronic_noise;
    else dE=0;
    if (dE) {
      if (flag_lorentzian) dE  *= tan(PI/2*randpm1()); // Lorentzian distribution
      else                 dE  *= randnorm();          // Gaussian distribution
      E += dE;
    }

    i = floor((E-Emin)*nE/(Emax-Emin));
    if(i >= 0 && i < nE)
    {
        #pragma acc atomic
        E_N[i] = E_N[i] + 1;
        #pragma acc atomic
        E_p[i] = E_p[i] + p;
        #pragma acc atomic
        E_p2[i] = E_p2[i] + p*p;

        // special storage
        if (type == SDD_PILEUP) {
          #pragma acc atomic
          E_N_pileup[i] = E_N_pileup[i] + 1;
          #pragma acc atomic
          E_p_pileup[i] = E_p_pileup[i] + p;
          #pragma acc atomic
          E_p2_pileup[i] = E_p2_pileup[i] + p*p;

        } else if (type == SDD_ESCAPE) {
          #pragma acc atomic
          E_N_escape[i] = E_N_escape[i] + 1;
          #pragma acc atomic
          E_p_escape[i] = E_p_escape[i] + p;
          #pragma acc atomic
          E_p2_escape[i] = E_p2_escape[i] + p*p;
        }

        #pragma acc atomic
        N_sum = N_sum +1;
        #pragma acc atomic
        p_sum = p_sum +1;
        SCATTER;
    }

    if (restore_xray) {
        RESTORE_XRAY(INDEX_CURRENT_COMP, x, y, z, kx, ky, kz, phi, t, Ex, Ey, Ez, p);
    }
  }

%}

SAVE
%{
  DETECTOR_OUT_1D(
    "Energy monitor",
    "Energy [keV]",
    "Intensity",
    "E", Emin, Emax, nE,
    &E_N[0],&E_p[0],&E_p2[0],
    filename);
  if (escape_ratio)
    {
      char f_escape[1024];
      snprintf(f_escape, 1024, "Escape_%s",filename);
      DETECTOR_OUT_1D(
      "Energy monitor (escape)",
      "Energy [keV]",
      "Intensity (escape)",
      "E", Emin, Emax, nE,
      &E_N_escape[0],&E_p_escape[0],&E_p2_escape[0],
      f_escape);
    }
  if (pileup_ratio)
    {
      char f_pileup[1024];
      snprintf(f_pileup, 1024, "PileUp_%s",filename);
      DETECTOR_OUT_1D(
      "Energy monitor (pile-up)",
      "Energy [keV]",
      "Intensity (pile-up)",
      "E", Emin, Emax, nE,
      &E_N_pileup[0],&E_p_pileup[0],&E_p2_pileup[0],
      f_pileup);
    }
%}

DISPLAY %{
  if (shape ==0) {          // disk
    circle("xy",0,0,0,radius);

  } else if (shape == 1) {  // rectangle
    rectangle("xy",0,0,0,xwidth,yheight);

  } else if (shape == 2) {  // sphere
    circle("xy",0,0,0,fabs(radius));
    circle("xz",0,0,0,fabs(radius));
    circle("yz",0,0,0,fabs(radius));
  }
%}

END
