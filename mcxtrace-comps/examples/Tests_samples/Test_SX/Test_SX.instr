/*******************************************************************************
*         McXtrace instrument definition URL=http://www.mcxtrace.org
*
* Instrument: Test_SX
*
* %Identification
* Written by: E. Farhi
* Date: Sept 26th 2019
* Origin: Synchrotron Soleil
* Release: McXtrace 3.5
* Version: $Revision$
* %INSTRUMENT_SITE: Tests_samples
*
* Unit-test instrument for the Single_crystal sample component.
*
* Simply a model source illuminating a SX sample.
* The default sample itself is a Mo bulk crystal.
* The idea is to compare the fluorescence and diffraction patterns:
* - index=1: use Single_crystal
* - index=2: use FluoCrystal
* - index=3: use Fluorescence+Single_crystal in a GROUP
*
* %Example: index=1 Detector: psd_Diff_I=2.29638e-13
* %Example: index=2 Detector: psd_Diff_I=3.70277e-14
* %Example: index=3 Detector: psd_Diff_I=1.19386e-13
*
* %Parameters
* reflections: [str] List of powder reflections, LAU/CIF format.
* index:       [1]   Index of the sample component to use. 1=Single_crystal, 2=FluoCrystal, 3=Fluorescence+Single_crystal in a GROUP
* E0:          [keV] Source mean energy of xrays.
* dE:          [keV] Source energy half spread of x-rays.
*
* %End
*******************************************************************************/

DEFINE INSTRUMENT Test_SX(string reflections="Mo.lau", int index=1, E0 = 7, dE = 6.9)

USERVARS %{
  int Stype;
%}

INITIALIZE %{
  MPI_MASTER(
    switch (index) {
      case 1:
        printf("%s: Using Single_crystal (pure diffraction)\n", NAME_INSTRUMENT); break;
      case 2:
        printf("%s: Using FluoCrystal    (fluorescence+diffraction)\n", NAME_INSTRUMENT); break;
      case 3:
        printf("%s: Using Fluorescence+Single_crystal in a GROUP (fluorescence+diffraction)\n", NAME_INSTRUMENT); break;
      default:
        exit(printf("%s: Unknown sample index %i. Use index=1-4.", NAME_INSTRUMENT, index));
    });
  %}

TRACE
COMPONENT src = Source_flat(
    yheight = 1e-3, xwidth = 1e-3, dist = 10, focus_xw = 1e-3,
    focus_yh = 1e-3, E0 = E0, dE = dE)
AT (0, 0, 0) ABSOLUTE

COMPONENT sample_pos=Arm()
AT (0, 0, 10) RELATIVE PREVIOUS

COMPONENT sample = Single_crystal(reflections=reflections, material_datafile="NULL", 
    radius = .5e-4, yheight = 1e-3, mosaic=5)
    WHEN(index==1)
AT (0, 0, 0) RELATIVE sample_pos
EXTEND %{
  if(!SCATTERED) ABSORB;
  else if (hkl_info.type == 'c') Stype=DIFFRACTION;
  else Stype=FLUORESCENCE;
%}

COMPONENT sampleF = FluoCrystal(material=reflections,
    radius = .5e-4, yheight = 1e-3, mosaic=5)
    WHEN(index==2)
AT (0, 0, 0) RELATIVE sample_pos
EXTEND %{
  if(!SCATTERED) ABSORB;
  else Stype=type;
%}

// Fluorescence+SX in a GROUP
COMPONENT FluoG = Fluorescence(
  radius = .5e-4, yheight = 1e-3, material=reflections, p_interact=0.5)
WHEN (index == 3)
AT (0, 0, 0) RELATIVE sample_pos
GROUP FluSX
EXTEND %{
  if (SCATTERED) Stype = type;
%}

COMPONENT SX = COPY(sample)(sigma_inc=-1)
WHEN (index == 3)
AT (0, 0, 0) RELATIVE sample_pos
GROUP FluSX
EXTEND %{
  if (SCATTERED) {
    if (hkl_info.type == 'c') Stype=DIFFRACTION;
    else Stype=FLUORESCENCE;
  } else ABSORB;
%}

COMPONENT psd4pi = PSD_monitor_4PI(
    nx = 180, ny = 180, filename = "psd4pi", radius = 0.1, restore_xray = 1)
AT (0, 0, 0) RELATIVE sample

COMPONENT psd_Diff = PSD_monitor_4PI(
    nx = 180, ny = 180, filename = "psd4pi_diff", radius = 0.1, restore_xray = 1)
WHEN (Stype == DIFFRACTION)
AT (0, 0, 0) RELATIVE sample

END
